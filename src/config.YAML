#Database Location
database: "data/survive.db"

#----------------DATABASE PREPROCESSING PARAMETERS----------------#

#### RENAME COLUMNS #####
#Renaming configuration for columns in dictionary format,
#e.g. {'x': 'y', 'a': 'b'} where x is the original name of the feature and y is the name you want it replaced with
rename_dict: {'Pletelets': 'Platelets',
              'Creatinine phosphokinase': 'Creatine phosphokinase'}

#### NUMERICAL FEATURES #####
#Numerical features in your Dataframe (After renaming)
num_cols: ['Age',
           'Sodium',
           'Platelets',
           'Creatine phosphokinase',
           'Creatinine',
           'Blood Pressure',
           'Hemoglobin',
           'Height',
           'Weight']

#### CATEGORICAL FEATURES #####
#Categorical features in your Dataframe (After renaming)
cat_cols: ['Gender',
           'Smoke',
           'Diabetes',
           'Ejection Fraction']

#### IRRELEVANT FEATURES #####
#Features that are irrelevant to your investigation, to be removed from the dataframe
irrelevant: ['ID',
             'Favorite color']

#### FEATURES TO APPLY ABSOLUTE #####
#Features that are suspected/known to have values that should be positive but were incorrectly input as negative
abs_cols: ['Age']

#### ORDINAL VARIABLES #####
#Creates custom ordinal variables using a nested dictionary
#e.g. {Sodium: 'Sodium': {'hyponatremia': 135, 'normal_sodium': 145, 'hypernatremia': 'stop'} means:
#for a particular value of x, x = 'hyponatremia' if x>=0 & x<135, x = normal sodium if x>=135 & x<145,
#x = 'hypernatremia' if x>=145
ordinal: {'Sodium': {'hyponatremia': 135, 'normal_sodium': 145, 'hypernatremia': 'stop'},
          'Platelets': {'thrombocytopenia': 150000, 'normal_platelets': 450000, 'thrombocytosis': 'stop'}}

#### CATEGORICAL VALUE REPLACEMENT ####
correct_instruction: {'Survive': {'No': 0, 'Yes': 1, '0': 0, '1': 1},
                       'Smoke': {'NO': 'No', 'YES': 'Yes'},
                       'Ejection Fraction': {'L': 'Low', 'N': 'Normal'}}

#### BMI ####
#Calculates BMI, if key is set to 1
bmi_key: 1

#----------------Training Parameters----------------#
#### Dependent Variable ####
#Selects the column that serves as the dependent variable for the study
dependent: 'Survive'

#### Test Size ####
#Allocates a specified portion of the data (0-1) to a test set. Testing will not be performed if set to 0
test_size: 0.2

#----------------CLASSIFIER PARAMETERS----------------#
#### K-Nearest Neighbours (KNN) Classifier Parameters ####
knn_n_neighbors: 5
knn_weights: 'uniform'
knn_algorithm: 'auto'
knn_leaf_size: 30
knn_p: 2
knn_metric: minkowski
knn_metric_params:
knn_n_jobs:

#### Balanced Bagging Classifier Parameters ####
#Note that a Decision Tree has been pre-set as the base_estimator
bb_n_estimators: 10
bb_max_samples: 1.0
bb_max_features: 1.0
bb_bootstrap: True
bb_bootstrap_features: False
bb_oob_score: False
bb_warm_start: False
bb_sampling_strategy: 'auto'
bb_replacement: False
bb_n_jobs:
bb_random_state: 42
bb_verbose: 0
bb_sampler:

#### Random Forest Classifier Parameters ####
rf_n_estimators: 100
rf_criterion: 'gini'
rf_max_depth:
rf_min_samples_split: 2
rf_min_samples_leaf: 1
rf_min_weight_fraction_leaf: 0
rf_max_features: 'auto'
rf_max_leaf_nodes:
rf_min_impurity_decrease: 0
rf_bootstrap: True
rf_oob_score: False
rf_n_jobs:
rf_random_state:
rf_verbose: 0
rf_warm_start: False
rf_class_weight:
rf_ccp_alpha: 0
rf_max_samples: